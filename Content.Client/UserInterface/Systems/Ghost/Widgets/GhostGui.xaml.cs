using Content.Client.Stylesheets;
using Content.Client.UserInterface.Systems.Ghost.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing; // Corvax-Wega-GhostRespawn

namespace Content.Client.UserInterface.Systems.Ghost.Widgets;

[GenerateTypedNameReferences]
public sealed partial class GhostGui : UIWidget
{
    [Dependency] private readonly IGameTiming _gameTiming = default!; // Corvax-Wega-GhostRespawn

    private TimeSpan? _timeOfDeath; // Corvax-Wega-GhostRespawn
    private float _minTimeToRespawn; // Corvax-Wega-GhostRespawn
    public GhostTargetWindow TargetWindow { get; }
    public GhostRespawnWindow RespawnWindow { get; } // Corvax-Wega-GhostRespawn

    public event Action? RequestWarpsPressed;
    public event Action? ReturnToBodyPressed;
    public event Action? GhostRolesPressed;
    public event Action? GhostRespawnPressed; // Corvax-Wega-GhostRespawn

    public GhostGui()
    {
        RobustXamlLoader.Load(this);

        TargetWindow = new GhostTargetWindow();
        RespawnWindow = new GhostRespawnWindow(); // Corvax-Wega-GhostRespawn

        MouseFilter = MouseFilterMode.Ignore;

        GhostWarpButton.OnPressed += _ => RequestWarpsPressed?.Invoke();
        ReturnToBodyButton.OnPressed += _ => ReturnToBodyPressed?.Invoke();
        GhostRolesButton.OnPressed += _ => GhostRolesPressed?.Invoke();
        RespawnWindow.RespawnButton.OnPressed += _ => GhostRespawnPressed?.Invoke(); // Corvax-Wega-GhostRespawn
        GhostRespawnButton.OnPressed += _ => RespawnWindow.OpenCentered(); // Corvax-Wega-GhostRespawn
    }

    // Corvax-Wega-GhostRespawn-start
    public void UpdateGhostRespawn(TimeSpan? todd)
    {
        _timeOfDeath = todd;
        _minTimeToRespawn = 900.0f;
    }
    // Corvax-Wega-GhostRespawn-end

    public void Hide()
    {
        TargetWindow.Close();
        Visible = false;
    }

    public void Update(int? roles, bool? canReturnToBody, TimeSpan? timeOfDeath, float minTimeToRespawn) // Corvax-Wega-GhostRespawn
    {
        ReturnToBodyButton.Disabled = !canReturnToBody ?? true;
        _timeOfDeath = timeOfDeath; // Corvax-Wega-GhostRespawn
        _minTimeToRespawn = minTimeToRespawn; // Corvax-Wega-GhostRespawn

        if (roles != null)
        {
            GhostRolesButton.Text = Loc.GetString("ghost-gui-ghost-roles-button", ("count", roles));
            if (roles > 0)
            {
                GhostRolesButton.StyleClasses.Add(StyleBase.ButtonCaution);
            }
            else
            {
                GhostRolesButton.StyleClasses.Remove(StyleBase.ButtonCaution);
            }
        }

        TargetWindow.Populate();
    }

    // Corvax-Wega-GhostRespawn-start
    protected override void FrameUpdate(FrameEventArgs args)
    {
        if (_timeOfDeath is null)
        {
            GhostRespawnButton.Text = Loc.GetString("ghost-gui-respawn-button-allowed");
            GhostRespawnButton.Disabled = false;
            return;
        }
        var delta = (_minTimeToRespawn - _gameTiming.CurTime.Subtract(_timeOfDeath.Value).TotalSeconds);
        if (delta <= 0)
        {
            GhostRespawnButton.Text = Loc.GetString("ghost-gui-respawn-button-allowed");
            GhostRespawnButton.Disabled = false;
        }
        else
        {
            GhostRespawnButton.Text = Loc.GetString("ghost-gui-respawn-button-denied", ("time", $"{delta:f1}"));
            GhostRespawnButton.Disabled = true;
        }
    }
    // Corvax-Wega-GhostRespawn-end

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (disposing)
        {
            TargetWindow.Dispose();
        }
    }
}

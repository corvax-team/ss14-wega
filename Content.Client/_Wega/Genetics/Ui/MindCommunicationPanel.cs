using System.Numerics;
using Content.Shared.Genetics;
using Content.Shared.Humanoid;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;

namespace Content.Client._Wega.Genetics.Ui;

[GenerateTypedNameReferences]
public sealed partial class MindCommunicationPanel : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IEntityNetworkManager _entityNetworkManager = default!;
    [Dependency] private readonly ISharedPlayerManager _playerManager = default!;

    public MindCommunicationPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        InitializeTargets();
    }

    private void InitializeTargets()
    {
        foreach (var actor in _entityManager.EntityQuery<ActorComponent>())
        {
            if (_entityManager.TryGetComponent<MetaDataComponent>(actor.Owner, out var metaData)
                && _entityManager.HasComponent<HumanoidAppearanceComponent>(actor.Owner))
            {
                var entityName = metaData.EntityName;
                AddTargetButton(entityName, actor.Owner);
            }
        }
    }

    private void AddTargetButton(string targetName, EntityUid targetUid)
    {
        var button = new Button
        {
            Text = targetName,
            HorizontalAlignment = HAlignment.Center,
            VerticalAlignment = VAlignment.Center,
            MinSize = new Vector2(300, 32),
            MaxSize = new Vector2(300, 32)
        };

        button.OnPressed += _ => HandleTargetSelection(targetUid);

        TargetsContainer.AddChild(button);
    }

    private void HandleTargetSelection(EntityUid targetUid)
    {
        var netTargetEntity = _entityManager.GetNetEntity(targetUid);
        var netEntity = _entityManager.GetNetEntity(_playerManager.LocalSession?.AttachedEntity ?? EntityUid.Invalid);

        _entityNetworkManager.SendSystemNetworkMessage(
            new MindCommunicationTargetSelectedEvent(netEntity, netTargetEntity));

        Close();
    }
}

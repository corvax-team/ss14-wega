using System.Linq;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Surgery;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Wega.Surgery.Ui
{
    [GenerateTypedNameReferences]
    public sealed partial class BodyScannerWindow : FancyWindow
    {
        public BodyScannerWindow()
        {
            RobustXamlLoader.Load(this);
        }

        public void UpdateState(BodyScannerBoundUserInterfaceState state)
        {
            PatientNameLabel.Text = state.PatientName ?? Loc.GetString("body-scanner-no-patient");
            PatientStatusLabel.Text = state.PatientStatus ?? Loc.GetString("body-scanner-status-unknown");

            ConnectionStatusLabel.Text = state.ScannerConnected
                ? Loc.GetString("body-scanner-connected")
                : Loc.GetString("body-scanner-disconnected");

            ConnectionStatusLabel.FontColorOverride = state.ScannerConnected
                ? Color.FromHex("#00FF00")
                : Color.FromHex("#FF0000");

            DamagesContainer.RemoveAllChildren();

            if (state.Damages == null || state.Damages.Count == 0)
            {
                DamagesContainer.AddChild(new Label
                {
                    Text = Loc.GetString("body-scanner-no-damages"),
                    StyleClasses = { StyleNano.StyleClassLabelSecondaryColor }
                });
                return;
            }

            foreach (var damage in state.Damages)
            {
                var damageContainer = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Vertical,
                    Margin = new Thickness(0, 0, 0, 10)
                };

                var damageHeader = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Horizontal
                };
                damageHeader.AddChild(new Label
                {
                    Text = damage.DamageName,
                    StyleClasses = { StyleNano.StyleClassLabelBig }
                });

                damageContainer.AddChild(damageHeader);

                var partsLabel = new Label
                {
                    Text = Loc.GetString("body-scanner-affected-parts",
                        ("parts", string.Join(", ", damage.AffectedParts.Select(p => Loc.GetString($"body-scanner-part-{p}"))))),
                    StyleClasses = { StyleNano.StyleClassLabelSecondaryColor }
                };

                damageContainer.AddChild(partsLabel);
                DamagesContainer.AddChild(damageContainer);
            }
        }
    }
}

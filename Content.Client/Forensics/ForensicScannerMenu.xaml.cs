using System.Linq;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using Content.Shared.Forensics;

namespace Content.Client.Forensics
{
    [GenerateTypedNameReferences]
    public sealed partial class ForensicScannerMenu : DefaultWindow
    {
        [Dependency] private readonly IGameTiming _gameTiming = default!;
        private float _printCooldown;

        public ForensicScannerMenu()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            FingerprintsButton.OnToggled += OnFingerprintsToggled;
            FibersButton.OnToggled += OnFibersToggled;
            DnaButton.OnToggled += OnDnaToggled;
            ResiduesButton.OnToggled += OnResiduesToggled;
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);

            if (_printCooldown > 0f)
            {
                _printCooldown -= args.DeltaSeconds;
                if (_printCooldown <= 0f)
                {
                    _printCooldown = 0f;
                    Print.Disabled = false;
                    StatusLabel.Text = Loc.GetString("forensic-scanner-status-scan-complete");
                }
                else
                {
                    StatusLabel.Text = Loc.GetString("forensic-scanner-print-cooldown",
                        ("time", MathF.Ceiling(_printCooldown)));
                }
            }
        }

        private void OnFingerprintsToggled(BaseButton.ButtonToggledEventArgs args)
        {
            FingerprintsContent.Visible = args.Pressed;
            if (args.Pressed)
            {
                FibersButton.Pressed = false;
                DnaButton.Pressed = false;
                ResiduesButton.Pressed = false;

                FibersContent.Visible = false;
                DnaContent.Visible = false;
                ResiduesContent.Visible = false;
            }
        }

        private void OnFibersToggled(BaseButton.ButtonToggledEventArgs args)
        {
            FibersContent.Visible = args.Pressed;
            if (args.Pressed)
            {
                FingerprintsButton.Pressed = false;
                DnaButton.Pressed = false;
                ResiduesButton.Pressed = false;

                FingerprintsContent.Visible = false;
                DnaContent.Visible = false;
                ResiduesContent.Visible = false;
            }
        }

        private void OnDnaToggled(BaseButton.ButtonToggledEventArgs args)
        {
            DnaContent.Visible = args.Pressed;
            if (args.Pressed)
            {
                FingerprintsButton.Pressed = false;
                FibersButton.Pressed = false;
                ResiduesButton.Pressed = false;

                FingerprintsContent.Visible = false;
                FibersContent.Visible = false;
                ResiduesContent.Visible = false;
            }
        }

        private void OnResiduesToggled(BaseButton.ButtonToggledEventArgs args)
        {
            ResiduesContent.Visible = args.Pressed;
            if (args.Pressed)
            {
                FingerprintsButton.Pressed = false;
                FibersButton.Pressed = false;
                DnaButton.Pressed = false;

                FingerprintsContent.Visible = false;
                FibersContent.Visible = false;
                DnaContent.Visible = false;
            }
        }

        public void UpdateState(ForensicScannerBoundUserInterfaceState state)
        {
            if (string.IsNullOrEmpty(state.LastScannedName))
            {
                Print.Disabled = true;
                Clear.Disabled = true;
                NameLabel.Text = string.Empty;
                StatusLabel.Text = Loc.GetString("forensic-scanner-status-no-data");
                ClearAllContainers();
                return;
            }

            var remaining = state.PrintReadyAt - _gameTiming.CurTime;
            _printCooldown = (float)remaining.TotalSeconds;
            Print.Disabled = state.PrintReadyAt > _gameTiming.CurTime;

            Clear.Disabled = false;
            NameLabel.Text = state.LastScannedName;

            if (Print.Disabled)
            {
                StatusLabel.Text = Loc.GetString("forensic-scanner-print-cooldown",
                    ("time", MathF.Ceiling(_printCooldown)));
            }
            else
            {
                StatusLabel.Text = Loc.GetString("forensic-scanner-status-scan-complete");
            }

            UpdateContainer(FingerprintsContainer, state.Fingerprints);
            UpdateContainer(FibersContainer, state.Fibers);
            UpdateContainer(DnaContainer, state.TouchDNAs.Concat(state.SolutionDNAs.Except(state.TouchDNAs)));
            UpdateContainer(ResiduesContainer, state.Residues);
        }

        private void ClearAllContainers()
        {
            FingerprintsContainer.RemoveAllChildren();
            FibersContainer.RemoveAllChildren();
            DnaContainer.RemoveAllChildren();
            ResiduesContainer.RemoveAllChildren();
        }

        private void UpdateContainer(BoxContainer container, IEnumerable<string> items)
        {
            container.RemoveAllChildren();

            if (!items.Any())
            {
                container.AddChild(new Label
                {
                    Text = Loc.GetString("forensic-scanner-no-data"),
                    FontColorOverride = Color.Gray,
                    Align = Label.AlignMode.Center
                });
                return;
            }

            foreach (var item in items)
            {
                container.AddChild(new Label
                {
                    Text = item,
                    Margin = new Thickness(0, 0, 0, 4),
                    Align = Label.AlignMode.Center
                });
            }
        }
    }
}
